#!/usr/bin/env python3
import os
from time import sleep
from shutil import which
from re import fullmatch
from platform import system
from json import load, decoder
from subprocess import run, Popen, DEVNULL
from webbrowser import open as webbrowser_open
from argparse import ArgumentParser, RawTextHelpFormatter

os_name = system().lower()

parser = ArgumentParser(description = "common google searches from the command line", prog = "ggl", \
usage="""ggl [-h | --config] [-l | -p profile [-i]] [options | [--mail address [--sub subject]]] [query ...]
options: [-d | -gh | -w | -im | -v | -s | -y | -c | -g | -gm]""", formatter_class = RawTextHelpFormatter,\
        epilog = "author: Taraq Farhan\nemail : taraqfarhan@gmail.com", add_help=False)
parser.add_argument("-p", metavar="profile", help="select a specific chrome profile (use profile name or customized key)")
parser.add_argument("-l", "--list",action="store_true", help="show the customized keys for specific chrome profiles")
parser.add_argument("-i", "--incog", action="store_true", help="go incognito mode")
parser.add_argument("query", nargs='*', help="search query")

group = parser.add_mutually_exclusive_group()
group.add_argument("-d", "--ddg", action="store_true", help="search with duckduckgo instead of google")
group.add_argument("-gh", "--git", action="store_true", help="search the github repos")
group.add_argument("-w", "--wiki", action="store_true", help="search the wikipedia pages")
group.add_argument("-im", "--img", action="store_true", help="show the image seaction from the search")
group.add_argument("-v", "--vid", action="store_true", help="show the video section from the search")
group.add_argument("-s", "-st", "--stack", action="store_true", help="search stack-overflow")
group.add_argument("-y", "-yt", action="store_true", help="search the youtube")
group.add_argument("-c", "--gpt", action="store_true", help="prompt chatgpt")
group.add_argument("-g", "--gem", action="store_true", help="prompt gemini")
group.add_argument("-gm", "--gmail", action="store_true", help="search the gmail inbox")
group.add_argument("--mail", metavar="address", help="specify the recipient's email address")
parser.add_argument('--sub', metavar="subject", default="", help='subject of the email (optional with --mail)')

helper_grp = parser.add_mutually_exclusive_group()
helper_grp.add_argument("--config", action="store_true", help="open the config file")
helper_grp.add_argument("-h", "--help", action="store_true", help="show this help message and exit")
    
args = parser.parse_args()

def valid_email(address):
    regex = r"""(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])"""
    
    return True if fullmatch(regex, address) else False

### using brute-force method to make --sub optional when --mail is specified (this portion should be improved)
if args.mail is not None:
    if not valid_email(args.mail): parser.error(f"Invalid email address {args.mail}")
    if not args.query: parser.error("A text message is required when using --mail")
if args.sub != "" and args.mail is None: parser.error("--sub requires --mail")


def chromium_based_browser_installed():
    if (os_name == "darwin"): 
        # also look for chromium or Brave Browser in mac
        paths = [
            "/Applications/Google Chrome.app",
            "~/Applications/Google Chrome.app",
            "/Applications/Chromium.app",
            "~/Application/Chromium.app",
            "/Applications/Brave Browser.app",
            "~Applications/Brave Browser.app"
        ]
        return any(os.path.exists(os.path.expanduser(path)) for path in paths)
    elif (os_name == "linux"):  
        return (which("google-chrome") is not None) or (which("google-chrome-stable") is not None) or (which("chromium") is not None) or (which("chromium-stable") is not None) or (which("brave") is not None) or (which("brave-browser") is not None) or (which("brave-browser-stable") is not None)
    ### figure out the Chromium and Brave paths for windows
    elif (os_name == "windows"):
        paths = [
            os.path.expandvars(r"%ProgramFiles%\Google\Chrome\Application\chrome.exe"),
            os.path.expandvars(r"%ProgramFiles(x86)%\Google\Chrome\Application\chrome.exe"),
            os.path.expandvars(r"%LocalAppData%\Google\Chrome\Application\chrome.exe"),
        ]
        return any(os.path.exists(path) for path in paths)
    else: return False


def get_config_file_path():
    flag = True
    if (os_name == "windows"): config_dir = os.path.join(os.getenv("APPDATA"), "ggl")
    elif (os_name in ("darwin", "linux")): config_dir = os.path.join(os.getenv("HOME"), ".config", "ggl")
    else: flag = False
    if flag == True:
        os.makedirs(config_dir, exist_ok = True) # Ensure the config directory exists and Create the directory if it doesn't exist
        return os.path.join(config_dir, "config.json") # Return the full path to the config file


config_file_format = r""" 
"DEFAULT_PROFILE": "Default",
  "OTHER_PROFILES": [
    "Profile 1",
    "Profile 2",
    "Profile 3"
  ],
"KEYS_FOR_OTHER_PROFILES": ["2", "code", "personal""],
"CHROME_PATH_FOR_MAC": "/Applications/Google Chrome.app/",
"CHROME_PATH_FOR_LINUX": "/usr/bin/google-chrome",
"CHROME_PATH_FOR_WINDOWS": "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"
"""


config_path = get_config_file_path()


def write_config_file():
    with open(config_path, 'w') as file:  # This creates an 'config.json' file if there is no file in the configured path
        file.write(r"""{
   "COMMENTS": [
        "you may have Chromium or Brave Browser installed rather than Google Chrome",
        "Or you might have Chrome installed in a different path",
        "for both cases you have to edit CHROME_PATH in this file",
        "for example replace CHROME_PATH_FOR_LINUX: to /usr/bin/chromium",
        "Or replace CHROME_PATH_FOR_MAC: to /Applications/Brave Browser.app",
  
        "Check for the following directories corresponding to your OS to get the name of the Chrome Profiles",
        "macOS: ~/Library/Application Support/Google/Chrome/",
        "macOS: ~/Library/Application Support/BraveSoftware/Brave-Browser/ (if using Brave Browser)",
        "Linux: ~/.config/google-chrome/",
        "Linux: ~/.config/chromium (if using chromium)", 
        "Windows: C:\\Users\\YourUserName\\AppData\\Local\\Google\\Chrome\\User Data\\",
        "Chrome Profiles (eg. Default, Profile 1, Profile 2, ... Profile <some number>)"
  ],
  
  
  "DEFAULT_PROFILE": "Default",
  "OTHER_PROFILES": [
    "Profile 1",
    "Profile 2",
    "Profile 3"
  ],
  "KEYS_FOR_OTHER_PROFILES": ["3", "code", "personal"],
  "CHROME_PATH_FOR_MAC": "/Applications/Google Chrome.app/",
  "CHROME_PATH_FOR_LINUX": "/usr/bin/google-chrome",
  "CHROME_PATH_FOR_WINDOWS": "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"
}""")
    print(f"""The config file will be opened automatically to you to be edited. Please edit the config.json file from {config_path} if it doesn't open automatically for you.\nThe file should look like the following. Only update the value of the keys and save the file.
  {config_file_format}""")
    print("\n\nyou can also use --config option to open the config file with ggl manually")
    

def edit_config_file():
    try:
        if os_name == "darwin": 
            try: run(["open", "-e", os.path.join(os.getenv("HOME"), ".config", "ggl", "config.json")])
            except: run(["vi", os.path.join(os.getenv("HOME"), ".config", "ggl", "config.json")])
        elif os_name == "linux": 
            try: run(["xdg-open", os.path.join(os.getenv("HOME"), ".config", "ggl", "config.json")])
            except: run(["vi", os.path.join(os.getenv("HOME"), ".config", "ggl", "config.json")])
        elif os_name == "windows": 
            try: run(["powershell.exe", "notepad", r'$env:APPDATA\ggl\config.json'])
            except: pass
    except FileExistsError or FileNotFoundError: write_config_file() # if file doesn't exist write config.json file automatically


def configurations_for_chrome_profile():
  try:      
    with open(config_path, 'r') as file: 
        content = file.read().strip()
        file.seek(0)
        if(os.path.getsize(config_path)) and (content != ""): 
            config = load(file)

            other_profiles = config["OTHER_PROFILES"]
            keys = config["KEYS_FOR_OTHER_PROFILES"]
            len_other_profiles = len(other_profiles)
            len_keys = len(keys)
            
            # remove garbage elements if OTHER_PROFILES have more options than KEYS_FOR_OTHER_PROFILES or vice-versa
            if len_other_profiles != len_keys:
                min_len = min(len_other_profiles, len_keys)
                if len_other_profiles > min_len: config["OTHER_PROFILES"] = other_profiles[:min_len]
                elif len_keys > min_len: config["KEYS_FOR_OTHER_PROFILES"] = keys[:min_len] 

            if (os_name == "darwin"): CHROME_PATH = config["CHROME_PATH_FOR_MAC"]
            elif (os_name == "linux"): CHROME_PATH = config["CHROME_PATH_FOR_LINUX"]
            elif (os_name == "windows"): CHROME_PATH = config["CHROME_PATH_FOR_WINDOWS"]
        else:
            print("Looks like your config.json file is empty. Writing the empty file with default values.")
            write_config_file()
            sleep(5)
            edit_config_file()
            exit(1)      
    
    return config['DEFAULT_PROFILE'], config['OTHER_PROFILES'], config['KEYS_FOR_OTHER_PROFILES'], CHROME_PATH

  except FileNotFoundError:
    print(f"config.json file was not found in this {config_path} path\n\nCreating an config.json file in {config_path}")
    write_config_file()
    sleep(5)
    edit_config_file()
    exit(1)


def get_url():
    if args.ddg: return f"https://duckduckgo.com/?&q={"+".join(args.query)}"
    elif args.img: return f"https://www.google.com/search?q={"+".join(args.query)}&tbm=isch"
    elif args.vid: return f"https://www.google.com/search?q={"+".join(args.query)}&tbm=vid"
    elif args.y: return f"https://www.youtube.com/results?search_query={"+".join(args.query)}"
    elif args.wiki: return f"https://en.wikipedia.org/wiki/Special:Search?search={"+".join(args.query)}"
    elif args.git: return f"https://github.com/search?q={"+".join(args.query)}"
    elif args.stack: return f"https://stackoverflow.com/search?q={"+".join(args.query)}"
    elif args.gpt: return f"https://chatgpt.com/?q={"+".join(args.query)}" # https://chatgpt.com/?model=gpt-4&q=%s
    elif args.gem: return f"https://gemini.google.com/search?q={"+".join(args.query)}"
    elif args.gmail: return f"https://mail.google.com/mail/u/0/#search/{"+".join(args.query)}"
    elif args.mail: return f"https://mail.google.com/mail/?view=cm&fs=1&to={args.mail}&su={args.sub}&body={"+".join(args.query)}"
    else: return f"https://www.google.com/search?q={"+".join(args.query)}"


def main():
    try:
        if (args.config): 
            print("Opening your config.json file")
            edit_config_file()
            exit(0)
        elif(args.help):
            parser.print_help()
            exit(0)
        
        url = get_url()
        incog = True if args.incog else False

        if chromium_based_browser_installed():
            try: DEFAULT_CHROME_PROFILE, OTHER_PROFILES, KEYS_FOR_OTHER_PROFILES, CHROME_PATH = configurations_for_chrome_profile()
            except decoder.JSONDecodeError : 
                print("Check your config.json file to see if there is any problem (like not removing extra (trailing) comma when it's not needed or any other problem)")
                print(f"\nAn ideal config.json file should look like\n{config_file_format}")
                print("Automatically openning your config.json file")
                print(f"If it doesn't open automatically in a few seconds edit the file from {config_path}")
                sleep(5)
                edit_config_file()
                exit(1)
                
            profile = DEFAULT_CHROME_PROFILE
            guest = False

            if DEFAULT_CHROME_PROFILE or OTHER_PROFILES:
                if args.p:
                    profile = args.p

                    if profile == DEFAULT_CHROME_PROFILE: profile = DEFAULT_CHROME_PROFILE
                    elif profile in ("g", "guest"): guest = True
                    elif (profile in OTHER_PROFILES) or (profile in KEYS_FOR_OTHER_PROFILES):
                        for profile_index, profile_name in enumerate(OTHER_PROFILES):
                            if profile == KEYS_FOR_OTHER_PROFILES[profile_index]: 
                                profile = profile_name
                                break         
                    else:
                        print("Error: Invalid profile name is used after -p flag")
                        print("Use ggl -l or ggl --list to see all the chrome profiles")
                        exit(1)

                elif args.list:                
                    print(f"{DEFAULT_CHROME_PROFILE}".ljust(30), "your default profile (no need to specify -p flag)")
                    for profile_index, profile_name in enumerate(OTHER_PROFILES):
                        print(f"{profile_name}".ljust(30), f"your customized key : '{KEYS_FOR_OTHER_PROFILES[profile_index]}'")                
                    print("Guest profile".ljust(30), "use key 'g' or 'guest' for the guest profile")
                    print(f"\nTo change any of these profile's key configure the config.json file ({config_path})")
                    print("You can also use --config flag with ggl to open the config file")
                    exit(0)
                
            else: 
                print("You either haven't configured your config.json file properly yet\nor currently you don't have any Chrome Profile")
                exit(1)
            
            if (os_name == "darwin"): 
                if incog: run(["open", "-na", CHROME_PATH, "--args", "--incognito", f"--profile-directory={profile}", url])
                else:
                    if guest: run(["open", "-na", CHROME_PATH, "--args", "--guest", url])
                    else: run(["open", "-na", CHROME_PATH, "--args", f"--profile-directory={profile}", url])
            elif (os_name == "linux"): 
                if incog: 
                    Popen([CHROME_PATH, f"--profile-directory={profile}", "--incognito", url], stdin=DEVNULL, stdout=DEVNULL, stderr=DEVNULL, start_new_session=True)
                else:
                    if guest: Popen([CHROME_PATH, "--guest", url], stdin=DEVNULL, stderr=DEVNULL, stdout=DEVNULL, start_new_session=True) 
                    else: Popen([CHROME_PATH, f"--profile-directory={profile}", url], stdin=DEVNULL, stdout=DEVNULL, stderr=DEVNULL, start_new_session=True)
            elif (os_name == "windows"): 
                ### still got problems when promting to send mail in windows using quotes (single or double)
                url = url.replace("&", "^&") # escaping &
                if incog: run(["start", "chrome.exe", f"--profile-directory={profile}","--incognito", url], shell=True)
                else: 
                    if guest: run(['start','chrome.exe', "--guest", url],shell=True)
                    else: run(["start", "chrome.exe", f"--profile-directory={profile}", url], shell=True)
        else:
            ### what happens if --incog flag is passed when chrome is not being used to search
            if incog: pass
            else: webbrowser_open(url)
    except KeyboardInterrupt: pass
             
if __name__ == "__main__": main()