#!/usr/bin/env python3
import os
from time import sleep
from shutil import which
from re import fullmatch
from platform import system
from json import load, decoder
from subprocess import run, Popen, DEVNULL
from webbrowser import open as webbrowser_open
from argparse import ArgumentParser

os_name = system().lower()

parser = ArgumentParser(add_help=False)

# parser = ArgumentParser(description = "common google searches from the command line", prog = "ggl", formatter_class = RawTextHelpFormatter,\
# epilog = "author: Taraq Farhan\nemail : taraqfarhan@gmail.com")

group = parser.add_mutually_exclusive_group()
group.add_argument("-i", "-im", "--img", action="store_true", help="show the image seaction from the search")
group.add_argument("-v", "-vi", "--vid", action="store_true", help="show the video section from the search")
group.add_argument ("-gd", "--drive", action="store_true", help="search your google drive")
group.add_argument ("-gr", "--recent", action="store_true", help="show google's recent search results (last 1 year)")
group.add_argument("-tr", "--gtr", "--trans", action="store_true", help="google translate")
group.add_argument("--map", "--gmap", action="store_true", help="search google map")
group.add_argument("-gm", "--gmail", action="store_true", help="search the gmail inbox")

group.add_argument("-so", "--stack-ov", action="store_true", help="search stack-overflow")
group.add_argument("-se", "--stack-ex",action="store_true", help="search stack-exchange")
group.add_argument("--man", "--manpage", action ="store_true", help="search for linux manual pages")
group.add_argument("-py", "--py-docs", action="store_true", help="search python3 docs")
group.add_argument("--cpp", "--cppreference", action="store_true", help="search cppreference")
group.add_argument("--mdn", "--mdn-docs", action="store_true", help="search mozilla web docs")
group.add_argument("-hn", "--hacker-news", action="store_true", help="search on hacker news")
group.add_argument("-su", "--super", action="store_true", help="search on super user forum")
group.add_argument("-gh", "--git", action="store_true", help="search the github repos")
group.add_argument("--ghu", "--gh-user", action="store_true", help="search a github user")
group.add_argument("--ghg", "--gh-gists", action="store_true", help="search github gists")
group.add_argument("--ghi", "--gh-issues", action="store_true", help="search github issues")

group.add_argument("-c", "--gpt", action="store_true", help="prompt chatgpt")
# group.add_argument("-g", "--gem", action="store_true", help="prompt gemini")
group.add_argument("-ph", "--phind", action="store_true", help="prompt phind")
group.add_argument("-px", "--perplexity", action="store_true", help="prompt perplexity ai")
group.add_argument("-cp", "--copilot", action="store_true", help="prompt microsoft copilot")

group.add_argument("-y", "-yt", action="store_true", help="search the youtube")
group.add_argument("-w", "--wiki", action="store_true", help="search the wikipedia pages")
group.add_argument("-am", "--amz", "--amazon", action="store_true", help="search the amazon store")
group.add_argument("-x", "--twitter", action="store_true", help="search on twitter")
group.add_argument("--dict", "--dictionary", action="store_true", help="search merriam webster dictionary")

group.add_argument("-d", "--ddg", action="store_true", help="search with duckduckgo instead of google")
group.add_argument("-b", "--bing", action="store_true", help="search with bing instead of google")
group.add_argument("-br", "--brave", action="store_true", help="search with brave instead of google")
group.add_argument("-qw", "--qwant", action="store_true", help="search with qwant instead of google")
group.add_argument("-ya", "--yahoo", action="store_true", help="search with yahoo instead of google")
group.add_argument("-ye", "--yelp", action="store_true", help="search with yelp instead of google")

group.add_argument("--mail", metavar="address", help="specify the recipient's email address")
parser.add_argument('--sub', metavar="subject", default="", help='subject of the email (optional with --mail)')

helper_grp = parser.add_mutually_exclusive_group()
helper_grp.add_argument("--config", action="store_true", help="open the config file")
helper_grp.add_argument("-h", "--help", action="store_true", help="show this help message and exit")
    
parser.add_argument("-p", "--profile", metavar="profile", help="select a specific chrome profile (use profile name or customized key)")
parser.add_argument("-l", "--list",action="store_true", help="show the customized keys for specific chrome profiles")
parser.add_argument("-I", "--incog", action="store_true", help="go incognito mode")
parser.add_argument("query", nargs='*', help="search query")

args = parser.parse_args()


def get_url():
    if args.ddg: return f"https://duckduckgo.com/?&q={"+".join(args.query)}"
    elif args.bing: return f"https://www.bing.com/search?q={"+".join(args.query)}"
    elif args.qwant: return f"https://www.qwant.com/?q={"+".join(args.query)}"
    elif args.brave: return f"https://search.brave.com/search?q={"+".join(args.query)}"
    elif args.yahoo: return f"https://search.yahoo.com/search?p={"+".join(args.query)}&ei=UTF-8"
    elif args.yelp: return f"http://www.yelp.com/search?find_desc={"+".join(args.query)}&src=opensearch"

    elif args.recent: return f"https://www.google.com/search?hl=en&tbo=1&tbs=qdr:y&q={"+".join(args.query)}"
    elif args.img: return f"https://www.google.com/search?q={"+".join(args.query)}&tbm=isch"
    elif args.vid: return f"https://www.google.com/search?q={"+".join(args.query)}&tbm=vid"
    elif args.drive: return f"https://drive.google.com/drive/search?q={"+".join(args.query)}" 
    elif args.gtr: return f"https://translate.google.com/?source=osdd#auto|auto|{"+".join(args.query)}"
    elif args.map: return f"https://www.google.com/maps?q={"+".join(args.query)}"

    elif args.y: return f"https://www.youtube.com/results?search_query={"+".join(args.query)}"
    elif args.wiki: return f"https://en.wikipedia.org/wiki/Special:Search?search={"+".join(args.query)}"
    elif args.amz: return f"https://www.amazon.com/s?k={"+".join(args.query)}"
    elif args.twitter: return f"https://x.com/search?q={"+".join(args.query)}"
    elif args.dict: return f"https://www.merriam-webster.com/dictionary/{"+".join(args.query)}"

    elif args.git: return f"https://github.com/search?q={"+".join(args.query)}"
    elif args.ghu: return f"https://github.com/search?q={"+".join(args.query)}&type=users"
    elif args.ghg: return f"https://gist.github.com/search?q={"+".join(args.query)}&ref=opensearch"
    elif args.ghi: return f"https://github.com/issues?utf8=âœ“&q=is%3Aopen+is%3Aissue+label%3A%22help+wanted%22++{"+".join(args.query)}"
    elif args.stack_ov: return f"https://stackoverflow.com/search?q={"+".join(args.query)}"
    elif args.stack_ex: return f"https://stackexchange.com/search?q={"+".join(args.query)}"
    elif args.py_docs: return f"https://docs.python.org/3/search.html?q={"+".join(args.query)}"
    elif args.man: return f"https://linux.die.net/man/1/{"+".join(args.query)}"
    elif args.cpp: return f"https://en.cppreference.com/w/Special:Search/{"+".join(args.query)}"
    elif args.mdn: return f"https://developer.mozilla.org/en-US/search?q={"+".join(args.query)}"
    elif args.hacker_news: return f"https://hn.algolia.com/?q={"+".join(args.query)}"
    elif args.super: return f"https://superuser.com/search?q={"+".join(args.query)}"

    elif args.gpt: return f"https://chatgpt.com/?q={"+".join(args.query)}" 
    # elif args.gem: return f"https://gemini.google.com/search?q={"+".join(args.query)}"
    elif args.copilot: return f"https://www.bing.com/copilotsearch?q={"+".join(args.query)}"
    elif args.phind: return f"https://www.phind.com/search?q={"+".join(args.query)}"
    elif args.perplexity: return f"https://www.perplexity.ai/search?q={"+".join(args.query)}"

    elif args.gmail: return f"https://mail.google.com/mail/u/0/#search/{"+".join(args.query)}"
    elif args.mail: return f"https://mail.google.com/mail/?view=cm&fs=1&to={args.mail}&su={args.sub}&body={"+".join(args.query)}"
    else: return f"https://www.google.com/search?q={"+".join(args.query)}"


def valid_email(address):
    regex = r"""(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])"""
    
    return True if fullmatch(regex, address) else False

### using brute-force method to make --sub optional when --mail is specified (this portion should be improved)
if args.mail is not None:
    if not valid_email(args.mail): parser.error(f"Invalid email address {args.mail}")
    if not args.query: parser.error("A text message is required when using --mail")
if args.sub != "" and args.mail is None: parser.error("--sub requires --mail")


def chromium_based_browser_installed():
    if (os_name == "darwin"): 
        paths = [
            "/Applications/Google Chrome.app",
            "~/Applications/Google Chrome.app",
            "/Applications/Chromium.app",
            "~/Application/Chromium.app",
            "/Applications/Brave Browser.app",
            "~Applications/Brave Browser.app"
        ]
        return any(os.path.exists(os.path.expanduser(path)) for path in paths)
    elif (os_name == "linux"):  
        return (which("google-chrome") is not None) or (which("google-chrome-stable") is not None) or (which("chromium") is not None) or (which("chromium-stable") is not None) or (which("brave") is not None) or (which("brave-browser") is not None) or (which("brave-browser-stable") is not None)
    ### figure out the Chromium and Brave paths for windows
    elif (os_name == "windows"):
        paths = [
            os.path.expandvars(r"%ProgramFiles%\Google\Chrome\Application\chrome.exe"),
            os.path.expandvars(r"%ProgramFiles(x86)%\Google\Chrome\Application\chrome.exe"),
            os.path.expandvars(r"%LocalAppData%\Google\Chrome\Application\chrome.exe"),
        ]
        return any(os.path.exists(path) for path in paths)
    else: return False


def get_config_file_path():
    flag = True
    if (os_name == "windows"): config_dir = os.path.join(os.getenv("APPDATA"), "ggl")
    elif (os_name in ("darwin", "linux")): config_dir = os.path.join(os.getenv("HOME"), ".config", "ggl")
    else: flag = False
    if flag == True:
        os.makedirs(config_dir, exist_ok = True) # Ensure the config directory exists and Create the directory if it doesn't exist
        return os.path.join(config_dir, "config.json") # Return the full path to the config file


config_file_format = r""" 
"DEFAULT_PROFILE": "Default",
  "OTHER_PROFILES": [
    "Profile 1",
    "Profile 2",
    "Profile 3"
  ],
"KEYS_FOR_OTHER_PROFILES": ["2", "code", "personal""],
"CHROME_PATH_FOR_MAC": "/Applications/Google Chrome.app/",
"CHROME_PATH_FOR_LINUX": "/usr/bin/google-chrome",
"CHROME_PATH_FOR_WINDOWS": "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"
"""

# need to figure out how to customize help messages just using the argparse module
custom_help_message = r"""ggl: common google searches from the command line

usage: ggl [profile selection] [options] query

profile selection: ggl -p name/key [ -I | --incog ] [options] query

Options:        
help:                       ggl -h|--help
google-services:            ggl [profile selection] [ -i | -v | -gd | -gr | -tr | --map | -gm ] query
developer:                  ggl [profile selection] [ -so | -sx | -su | -hn | -py | --mdn | -gh | --ghu | --ghi | --ghg ] query
ai:                         ggl [profile selection] [ -c | -g | -cp | -px | -ph ] prompt
misc:                       ggl [profile selection] [ -y | -w | -am | -x | --dict ] query
other search engines:       ggl [profile selection] [ -d | -b | -br| -qw | -ya | -ye ] query
mail:                       ggl [profile selection] --mail address [ --sub subject ] text


POSTIONAL ARGUMENTS:
  query                     search query

OPTIONS:
  -h, --help                show this help message and exit

Google-Services:
  -i, -im, --img            show the image seaction from the search
  -v, -vi, --vid            show the video section from the search
  -gd, --drive              search your google drive
  -gr, --recent             show google's recent search results (last 1 year)
  -tr, --gtr, --trans       google translate
  --map, --gmap             search google map
  -gm, --gmail              search the gmail inbox

Developer Sites:
  -so, --stack-ov           search stack-overflow
  -se, --stack-ex           search stack-exchange
  --man --manpage           search for linux manual pages
  -py, --py-docs            search python3 docs
  --cpp, --cppreference     search cppreference 
  --mdn, --mdn-docs         search mozilla web docs
  -hn, --hacker-news        search on hacker news
  -su, --super              search on super user forum
  -gh, --git                search the github repos
  --ghu, --gh-user          search a github user
  --ghg, --gh-gists         search github gists
  --ghi, --gh-issues        search github issues
  
AI:
  -c, --gpt                 prompt chatgpt
  -ph, --phind              prompt phind
  -px, --perplexity         prompt perplexity ai
  -cp, --copilot            prompt microsoft copilot
  
Misc:  
  -y, -yt                   search the youtube
  -w, --wiki                search the wikipedia pages
  -am, --amz, --amazon      search the amazon store
  -x, --twitter             search on twitter
  --dict, --dictionary      search merriam webster dictionary

Other Search Enginers:
  -d, --ddg                 search with duckduckgo instead of google
  -b, --bing                search with bing instead of google
  -br, --brave              search with brave instead of google
  -qw, --qwant              search with qwant instead of google
  -ya, --yahoo              search with yahoo instead of google
  -ye, --yelp               search with yelp instead of google

Mail (gmail):
  --mail address            specify the recipient's email address
  --sub subject             subject of the email (optional with --mail)

Profile and Config Options:
  --config                  open the config file
  -p --profile name/key     select a specific chrome profile (use profile name or customized key)
  -l, --list                show the customized keys for specific chrome profiles
  -I, --incog               go incognito mode


author: Taraq Farhan
email : taraqfarhan@gmail.com"""

config_path = get_config_file_path()


def write_config_file():
    with open(config_path, 'w') as file:  # This creates an 'config.json' file if there is no file in the configured path
        file.write(r"""{
   "COMMENTS": [
        "you may have Chromium or Brave Browser installed rather than Google Chrome",
        "Or you might have Chrome/Chromium/Brave installed in a different path",
        "for both cases you have to edit CHROME_PATH in this file",
        "for example replace CHROME_PATH_FOR_LINUX: to /usr/bin/chromium",
        "Or replace CHROME_PATH_FOR_MAC: to /Applications/Brave Browser.app",
  
        "Check for the following directories corresponding to your OS to get the name of the Chrome Profiles",
        "macOS: ~/Library/Application Support/Google/Chrome/",
        "macOS: ~/Library/Application Support/BraveSoftware/Brave-Browser/ (if using Brave Browser)",
        "Linux: ~/.config/google-chrome/",
        "Linux: ~/.config/chromium (if using chromium)", 
        "Windows: C:\\Users\\YourUserName\\AppData\\Local\\Google\\Chrome\\User Data\\",
        "Chrome Profiles (eg. Default, Profile 1, Profile 2, ... Profile <some number>)"
  ],
  
  
  "DEFAULT_PROFILE": "Default",
  "OTHER_PROFILES": [
    "Profile 1",
    "Profile 2",
    "Profile 3"
  ],
  "KEYS_FOR_OTHER_PROFILES": ["3", "code", "personal"],
  "CHROME_PATH_FOR_MAC": "/Applications/Google Chrome.app/",
  "CHROME_PATH_FOR_LINUX": "/usr/bin/google-chrome",
  "CHROME_PATH_FOR_WINDOWS": "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"
}""")
    print(f"""The config file will be opened automatically to you to be edited. Please edit the config.json file from {config_path} if it doesn't open automatically for you.\nThe file should look like the following. Only update the value of the keys and save the file.
  {config_file_format}""")
    print("\n\nyou can also use --config option to open the config file with ggl manually")
    

def edit_config_file():
    try:
        if os_name == "darwin": 
            try: run(["open", "-e", os.path.join(os.getenv("HOME"), ".config", "ggl", "config.json")])
            except: run(["vi", os.path.join(os.getenv("HOME"), ".config", "ggl", "config.json")])
        elif os_name == "linux": 
            try: run(["xdg-open", os.path.join(os.getenv("HOME"), ".config", "ggl", "config.json")])
            except: run(["vi", os.path.join(os.getenv("HOME"), ".config", "ggl", "config.json")])
        elif os_name == "windows": 
            try: run(["powershell.exe", "notepad", r'$env:APPDATA\ggl\config.json'])
            except: pass
    except FileExistsError or FileNotFoundError: 
        print(f"config.json file is not found in {config_path}")
        print("creating the config file for you")
        write_config_file() # if file doesn't exist write config.json file automatically


def configurations_for_chrome_profile():
  try:      
    with open(config_path, 'r') as file: 
        content = file.read().strip()
        file.seek(0)
        if(os.path.getsize(config_path)) and (content != ""): 
            config = load(file)

            other_profiles = config["OTHER_PROFILES"]
            keys = config["KEYS_FOR_OTHER_PROFILES"]
            len_other_profiles = len(other_profiles)
            len_keys = len(keys)
            
            # remove garbage elements if OTHER_PROFILES have more options than KEYS_FOR_OTHER_PROFILES or vice-versa
            if len_other_profiles != len_keys:
                min_len = min(len_other_profiles, len_keys)
                if len_other_profiles > min_len: config["OTHER_PROFILES"] = other_profiles[:min_len]
                elif len_keys > min_len: config["KEYS_FOR_OTHER_PROFILES"] = keys[:min_len] 

            if (os_name == "darwin"): CHROME_PATH = config["CHROME_PATH_FOR_MAC"]
            elif (os_name == "linux"): CHROME_PATH = config["CHROME_PATH_FOR_LINUX"]
            elif (os_name == "windows"): CHROME_PATH = config["CHROME_PATH_FOR_WINDOWS"]
        else:
            print("Looks like your config.json file is empty. Writing the empty file with default values.")
            write_config_file()
            sleep(5)
            edit_config_file()
            exit(1)      
    
    return config['DEFAULT_PROFILE'], config['OTHER_PROFILES'], config['KEYS_FOR_OTHER_PROFILES'], CHROME_PATH

  except FileNotFoundError:
    print(f"config.json file was not found in this {config_path} path\n\nCreating an config.json file in {config_path}")
    write_config_file()
    sleep(5)
    edit_config_file()
    exit(1)


def main():
    try:
        if (args.config): 
            print("Opening your config.json file")
            edit_config_file()
            exit(0)
        elif(args.help):
            print(custom_help_message)
            exit(0)
        
        url = get_url()
        incog = True if args.incog else False

        if chromium_based_browser_installed():
            try: DEFAULT_CHROME_PROFILE, OTHER_PROFILES, KEYS_FOR_OTHER_PROFILES, CHROME_PATH = configurations_for_chrome_profile()
            except decoder.JSONDecodeError : 
                print("Check your config.json file to see if there is any problem (like not removing extra (trailing) comma when it's not needed or any other problem)")
                print(f"\nAn ideal config.json file should look like\n{config_file_format}")
                print("Automatically openning your config.json file")
                print(f"If it doesn't open automatically in a few seconds edit the file from {config_path}")
                sleep(5)
                edit_config_file()
                exit(1)
                
            profile = DEFAULT_CHROME_PROFILE
            guest = False

            if DEFAULT_CHROME_PROFILE or OTHER_PROFILES:
                if args.profile:
                    profile = args.profile

                    if profile == DEFAULT_CHROME_PROFILE: profile = DEFAULT_CHROME_PROFILE
                    elif profile in ("g", "guest"): guest = True
                    elif (profile in OTHER_PROFILES) or (profile in KEYS_FOR_OTHER_PROFILES):
                        for profile_index, profile_name in enumerate(OTHER_PROFILES):
                            if profile == KEYS_FOR_OTHER_PROFILES[profile_index]: 
                                profile = profile_name
                                break         
                    else:
                        print("Error: Invalid profile name is used after -p flag")
                        print("Use ggl -l or ggl --list to see all the chrome profiles")
                        exit(1)

                elif args.list:                
                    print(f"{DEFAULT_CHROME_PROFILE}".ljust(30), "your default profile (no need to specify -p flag)")
                    for profile_index, profile_name in enumerate(OTHER_PROFILES):
                        print(f"{profile_name}".ljust(30), f"your customized key : '{KEYS_FOR_OTHER_PROFILES[profile_index]}'")                
                    print("Guest profile".ljust(30), "use key 'g' or 'guest' for the guest profile")
                    print(f"\nTo change any of these profile's key configure the config.json file ({config_path})")
                    print("You can also use --config flag with ggl to open the config file")
                    exit(0)
                
            else: 
                print("You either haven't configured your config.json file properly yet\nor currently you don't have any Chrome Profile")
                exit(1)
            
            if (os_name == "darwin"): 
                if incog: run(["open", "-na", CHROME_PATH, "--args", "--incognito", f"--profile-directory={profile}", url])
                else:
                    if guest: run(["open", "-na", CHROME_PATH, "--args", "--guest", url])
                    else: run(["open", "-na", CHROME_PATH, "--args", f"--profile-directory={profile}", url])
            elif (os_name == "linux"): 
                if incog: 
                    Popen([CHROME_PATH, f"--profile-directory={profile}", "--incognito", url], stdin=DEVNULL, stdout=DEVNULL, stderr=DEVNULL, start_new_session=True)
                else:
                    if guest: Popen([CHROME_PATH, "--guest", url], stdin=DEVNULL, stderr=DEVNULL, stdout=DEVNULL, start_new_session=True) 
                    else: Popen([CHROME_PATH, f"--profile-directory={profile}", url], stdin=DEVNULL, stdout=DEVNULL, stderr=DEVNULL, start_new_session=True)
            elif (os_name == "windows"): 
                ### still got problems when prompting to send mail in windows using quotes (single or double)
                url = url.replace("&", "^&") # escaping &
                if incog: run(["start", "chrome.exe", f"--profile-directory={profile}","--incognito", url], shell=True)
                else: 
                    if guest: run(['start','chrome.exe', "--guest", url],shell=True)
                    else: run(["start", "chrome.exe", f"--profile-directory={profile}", url], shell=True)
        else:
            ### what happens if --incog flag is passed when chrome based browser is not being used to search
            if incog: pass
            else: webbrowser_open(url)
    except KeyboardInterrupt: pass
             
if __name__ == "__main__": main()