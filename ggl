#!/usr/bin/env python3
import os
from json import load
from time import sleep
from shutil import which
from re import fullmatch
from subprocess import run
from platform import system
from webbrowser import open as webbrowser_open
from argparse import ArgumentParser, RawTextHelpFormatter

os_name = system().lower()

parser = ArgumentParser(description = "common internet searches from the command line",\
                        prog = "ggl", formatter_class = RawTextHelpFormatter,\
                        epilog = "author: Taraq Farhan\nemail : taraqfarhan@gmail.com")
parser.add_argument("-p", metavar="profile", help="select a specific chrome profile (use profile name or customized key)")
parser.add_argument("-l", "--list",action="store_true", help="show the customized keys for specific chrome profiles")
parser.add_argument("-i", "--incog", action="store_true", help="go incognito mode")
parser.add_argument("query", type=str, nargs='*', help="search query")

group = parser.add_mutually_exclusive_group()
group.add_argument("-d", "--ddg", action="store_true", help="search with duckduckgo instead of google")
group.add_argument("-gh", "--git", action="store_true", help="search the github repos")
group.add_argument("-w", "--wiki", action="store_true", help="search the wikipedia pages")
group.add_argument("-im", "--img", action="store_true", help="show the image seaction from the search")
group.add_argument("-v", "--vid", action="store_true", help="show the video section from the search")
group.add_argument("-s", "-st", "--stack", action="store_true", help="search stack-overflow")
group.add_argument("-y", "-yt", action="store_true", help="search the youtube")
group.add_argument("-c", "--gpt", action="store_true", help="prompt chatgpt")
group.add_argument("-g", "--gem", action="store_true", help="prompt gemini")
group.add_argument("-gm", "--gmail", action="store_true", help="search the gmail inbox")

args = parser.parse_args()


def chrome_installed():
    if (os_name == "darwin"): 
        paths = [
            "/Applications/Google Chrome.app",
            "~/Applications/Google Chrome.app",
        ]
        return any(os.path.exists(os.path.expanduser(path)) for path in paths)
    elif (os_name == "linux"):  
        return which("google-chrome") is not None or which("google-chrome-stable") is not None
    elif (os_name == "windows"):
        paths = [
            os.path.expandvars(r"%ProgramFiles%\Google\Chrome\Application\chrome.exe"),
            os.path.expandvars(r"%ProgramFiles(x86)%\Google\Chrome\Application\chrome.exe"),
            os.path.expandvars(r"%LocalAppData%\Google\Chrome\Application\chrome.exe"),
        ]
        return any(os.path.exists(path) for path in paths)
    else: return False


def get_config_file_path():
    flag = True
    if (os_name == "windows"): config_dir = os.path.join(os.getenv("APPDATA"), "ggl")
    elif (os_name in ("darwin", "linux")): config_dir = os.path.join(os.getenv("HOME"), ".config", "ggl")
    else: flag = False
    if flag == True:
        os.makedirs(config_dir, exist_ok = True) # Ensure the config directory exists and Create the directory if it doesn't exist
        return os.path.join(config_dir, "config.json") # Return the full path to the config file


config_file_format = r""" 
"DEFAULT_PROFILE": "Default",
  "OTHER_PROFILES": [
    "Profile 6",
    "Profile 8",
    "Profile 3",
    "Profile 7",
    "Profile 34"
  ],
  "KEYS_FOR_OTHER_PROFILES": ["2", "3", "work", "business", "code"],
  "CHROME_PATH_FOR_MAC": "/Applications/Google Chrome.app/",
  "CHROME_PATH_FOR_LINUX": "/usr/bin/google-chrome",
  "CHROME_PATH_FOR_WINDOWS": "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"
"""


config_path = get_config_file_path()


def write_config_file(config_path):
    print(f"config.json file was not found in this {config_path} path\n\nCreating an config.json file in {config_path}")
    with open(config_path, 'w') as file:  # This creates an 'config.json' file if there is no file in the configured path
        file.write(r"""{
  "DEFAULT_PROFILE": "Default",
  "OTHER_PROFILES": [
    "Profile 6",
    "Profile 8",
    "Profile 3",
    "Profile 7",
    "Profile 34"
  ],
  "KEYS_FOR_OTHER_PROFILES": ["2", "3", "work", "business", "code"],
  "CHROME_PATH_FOR_MAC": "/Applications/Google Chrome.app/",
  "CHROME_PATH_FOR_LINUX": "/usr/bin/google-chrome",
  "CHROME_PATH_FOR_WINDOWS": "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe"
}""")
    print(f"config.json file has been created for you now.\nThe path for the file is {config_path}\n\n")
    print(f"""The config file will be opened to you to be edited. Please edit the config.json file from {config_path} if it doesn't open automatically for you.\nThe file should look like the following. Only update the value of the keys and save the file.
  {config_file_format}""")
    
    
def edit_config_file():
    if os_name == "darwin": run(["open", "-e", os.path.join(os.getenv("HOME"), ".config", "ggl", "config.json")])
    elif os_name == "linux": run(["vi", os.path.join(os.getenv("HOME"), ".config", "ggl", "config.json")])
    elif os_name == "windows": pass


def configurations_for_chrome_profile():
  try:      
    with open(config_path, 'r') as file: 
        content = file.read().strip()
        file.seek(0)
        if(os.path.getsize(config_path)) and (content != ""): 
            config = load(file)
            if (os_name == "darwin"): CHROME_PATH = config["CHROME_PATH_FOR_MAC"]
            elif (os_name == "linux"): CHROME_PATH = config["CHROME_PATH_FOR_LINUX"]
            elif (os_name == "windows"): CHROME_PATH = config["CHROME_PATH_FOR_WINDOWS"]
        else:
            print(f"""Looks like your config.json file is empty, please configure it from {config_path}
Error: empty config.json file

The file should look like the following. Only update the value of the keys and save the file.
{config_file_format}""")
            exit(1)        
        
    return config['DEFAULT_PROFILE'], config['OTHER_PROFILES'], config['KEYS_FOR_OTHER_PROFILES'], CHROME_PATH

  except FileNotFoundError:
    write_config_file(config_path)
    sleep(3)
    edit_config_file()
    exit(0)


def valid_email(address):
    regex = r"""(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\.){3}(?:(2(5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])"""
    
    return True if fullmatch(regex, address) else False


def get_url():
    if args.ddg: return f"https://duckduckgo.com/?&q={"+".join(args.query)}"
    elif args.img: return f"https://www.google.com/search?q={"+".join(args.query)}&tbm=isch"
    elif args.vid: return f"https://www.google.com/search?q={"+".join(args.query)}&tbm=vid"
    elif args.y: return f"https://www.youtube.com/results?search_query={"+".join(args.query)}"
    elif args.wiki: return f"https://en.wikipedia.org/wiki/Special:Search?search={"+".join(args.query)}"
    elif args.git: return f"https://github.com/search?q={"+".join(args.query)}"
    elif args.stack: return f"https://stackoverflow.com/search?q={"+".join(args.query)}"
    elif args.gpt: return f"https://chatgpt.com/?q={"+".join(args.query)}" # https://chatgpt.com/?model=gpt-4&q=%s
    elif args.gem: return f"https://gemini.google.com/search?q={"+".join(args.query)}"
    elif args.gmail: return f"https://mail.google.com/mail/u/0/#search/{"+".join(args.query)}"
    else: return f"https://www.google.com/search?q={"+".join(args.query)}"


def main():
    url = get_url()
    incog = True if args.incog else False

    if chrome_installed():
        DEFAULT_CHROME_PROFILE, OTHER_PROFILES, KEYS_FOR_OTHER_PROFILES, CHROME_PATH = configurations_for_chrome_profile()
        profile = DEFAULT_CHROME_PROFILE
        guest = False

        if DEFAULT_CHROME_PROFILE or OTHER_PROFILES:
            if args.p:
                profile = args.p

                # checking the validity of the profile names (and the keys for the profile names specified in the config.json file)
                if (profile == DEFAULT_CHROME_PROFILE): profile = DEFAULT_CHROME_PROFILE
                elif (profile in OTHER_PROFILES) or (profile in KEYS_FOR_OTHER_PROFILES):
                    for profile_index, profile_name in enumerate(OTHER_PROFILES):
                        if profile == KEYS_FOR_OTHER_PROFILES[profile_index]: 
                            profile = profile_name
                            break         
                else:
                    print("""Error: Invalid profile name is used after -p or flag
Usage: ggl [-p profile] [--incog] [options] <search query>

Use ggl -l or ggl --list to see all the chrome profiles""" )
                    exit(1)

            elif args.list:                
                print(f"{DEFAULT_CHROME_PROFILE}".ljust(30), "use key ' ' (default profile)")
                for profile_index, profile_name in enumerate(OTHER_PROFILES):
                    print(f"{profile_name}".ljust(30), f"your customized key : '{KEYS_FOR_OTHER_PROFILES[profile_index]}'")                
                print("Guest profile".ljust(30), "use key 'g' or 'guest' for the guest profile")
                print(f"\nTo change any of these profile's key configure the config.json file ({config_path})")
                exit(0)
            
        else: 
            print("You either haven't configured your config.json file properly yet\nor currently you don't have any Chrome Profile")
            exit(1)
        
        if (os_name == "darwin"): 
            if incog:
                if guest: run(["open", "-na", CHROME_PATH, "--args", "--guest", "--incognito", url])
                else: run(["open", "-na", CHROME_PATH, "--args", "--incognito", f"--profile-directory={profile}", url])
            else:
                if guest: run(["open", "-na", CHROME_PATH, "--args", "--guest", url])
                else: run(["open", "-na", CHROME_PATH, "--args", f"--profile-directory={profile}", url])
        elif (os_name == "linux"): 
            if incog:
                if guest: run([CHROME_PATH, "--guest", "--incognito" ,url])
                else: run([CHROME_PATH, f"--profile-directory={profile}", "--incognito", url])
            else:
                if guest: run([CHROME_PATH, "--guest", url])
                else: run([CHROME_PATH, f"--profile-directory={profile}", url])
        elif (os_name == "windows"): 
            if incog:
                if guest: run(['start','chrome.exe', "--guest","--incognito", url],shell=True)
                else: run(["start", "chrome.exe", f"--profile-directory={profile}","--incognito", url], shell=True)
            else: 
                if guest: run(['start','chrome.exe', "--guest", url],shell=True)
                else: run(["start", "chrome.exe", f"--profile-directory={profile}", url], shell=True)
    else:
        if incog: pass
        else: webbrowser_open(url)
             
if __name__ == "__main__": main()